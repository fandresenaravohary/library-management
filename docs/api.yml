openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22058
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` cannot be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` cannot be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: pageSize
          description: Number of items per page for pagination
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Modify the author of a book
      operationId: updateBookAuthor
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          description: ID of the new author for the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author of the book has been updated
  /books/authors:
    put:
      summary: Update book authors
      operationId: updateBookAuthors
      requestBody:
        description: List of book and author pairs to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Books and authors have been updated
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: Filter returned authors by given name.
          schema:
            type: string
            required: false
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: pageSize
          description: Number of items per page for pagination
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    CrupdateBook:
      allOf:
        - $ref: "#/components/schemas/Book"
        - type: object
          properties:
            author:
              type: null
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum:
        - M
        - F



# Pourquoi UpdateBookAuthor possède uniquement l’identifiant de CrupdateBook et l’identifiant de Author, mais sans les autres propriétés telles que bookName et authorName comme dans leur composant respectif ? 
# Pour eviter de transmettre des données redondantes

# Dans quel cas, UpdateBookAuthor devrait avoir les propriétés de CrupdateBook et de Author ?
# Au cas où on fusionne les propriétés des livres ou auteurs en un seul
