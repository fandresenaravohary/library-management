openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22058
servers:
  - url: https://library.com
components:
  parameters:
    QueryPagination:
      name: page
      description: Page Number for pagination
      in: query
      schema:
        type: integer
        default: 1
      required: false
    PathPagination:
      name: pageSize
      description: Page size for pagination
      in: query
      schema:
        type: integer
        default: 20
      required: false

  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
      properties:
        author:
          $ref: "#/components/schemas/Author"
        topic:
          $ref: "#/components/schemas/Topic"
    CrupdateBook:
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        pageNumbers:
          type: integer
        topic:
          $ref: "#/components/schemas/Topic"
        releaseDate:
          type: string
          format: date
    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        TopicId:
          type: string
    Topic:
      properties:
        id:
          type: string
        topicName:
          type: string
          example: 
            - ROMANCE
            - COMEDY
            - OTHER
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum:
        - M
        - F
    CrupdateAuthor:
      type: object
      properties:
        authorName:
          type: string
          example: Billy Williams
        authorSex:
          $ref: "#/components/schemas/Sex"
    AuthorTopics:
      type: object
      allOf:
        - allOf:
            - $ref: "#/components/schemas/CrupdateAuthor"
      properties:
        topic:
          type: array
          items:
            $ref: "#/components/schemas/Topic"
    DefaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object

paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: "#/components/parameters/QueryPagination"
        - $ref: "#/components/parameters/PathPagination"
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /Topic:
    get:
      tags:
        - Topic
      summary: Get all topic
      parameters:
        - name: topicName 
          in: query
          description: Filter return topic by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic' 
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
    put:
      tags:
        - Topic 
      summary: Create or update a list of Topics 
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The list of created or updated Topics 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
    delete:
      tags:
        - Topic
      summary: delete one topic by the given id 
      parameters:
        - name: topicId 
          in: query
          description: id of the topic to delete 
          required: true 
          schema:
            type: string
      responses:
        200:
          description: The topic that have been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"

  /books/{bookId}/authors/{authorId}:
    put:
      summary: Modify the author of a book
      operationId: updateBookAuthor
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          description: ID of the new author for the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author of the book has been updated
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /books/authors:
    put:
      summary: Update book authors
      operationId: updateBookAuthors
      requestBody:
        description: List of book and author pairs to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Books and authors have been updated
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: Filter returned authors by given name.
          schema:
            type: string
          required: false
        - $ref: "#/components/parameters/QueryPagination"
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /books/{bookId}/topics/{topicId}:
    put:
      summary: Modify the topic of a book
      operationId: crupdateBookTopic
      parameters:
        - name: topicId
          in: path
          description: ID of the topic to update
          schema:
            type: string
          required: true
        - name: topicId
          in: path
          description: ID of the new topic for the book
          schema:
            type: string
          required: true
      responses:
        200:
          description: The topic of the book has been updated
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /books/topics:
    put:
      summary: Update book topics
      operationId: updateBookTopics
      requestBody:
        description: List of book updated in requestBody
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"
      responses:
        200:
          description: Books and authors have been updated
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
  /authorTopics:
    get:
      tags:
        - "Author"
      summary: Get all authorTopics
      description: The returned authors and list topics.
      operationId: getAuthorTopics
      responses:
        200:
          description: The list of authors with list topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthorTopics"
        default:
          description: Default response for other status codes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"





















































# Pourquoi UpdateBookAuthor possède uniquement l’identifiant de CrupdateBook et l’identifiant de Author, mais sans les autres propriétés telles que bookName et authorName comme dans leur composant respectif ? 
# Pour eviter de transmettre des données redondantes

# Dans quel cas, UpdateBookAuthor devrait avoir les propriétés de CrupdateBook et de Author ?
# Au cas où on fusionne les propriétés des livres ou auteurs en un seul

#Pourquoi les paginations sont-elles nécessaires ?
# Les utilisateurs préfèrent souvent consulter une petite quantité de données à la fois, au lieu de faire défiler une liste infinie. La pagination offre une expérience utilisateur plus conviviale.

#Est-ce qu’on peut gérer la pagination à travers les entêtes de la requête ?
#Oui, il est possible de gérer la pagination à travers les en-têtes de la requête, bien que ce ne soit pas la méthode la plus courante. Cependant, il est important de noter que l'utilisation des en-têtes pour la pagination n'est pas une pratique standard et peut prêter à confusion.

#Est-ce qu’on doit gérer la pagination à travers les entêtes de la requête ?
#L'utilisation de paramètres de requête pour la pagination est une pratique courante dans les API REST, et cela suit les conventions établies.

#comment est ce que vous feriez si c'est plusieurs auteurs en meme temps
#ajoutez des paramètres de requête à votre point d'entrée GET /authors